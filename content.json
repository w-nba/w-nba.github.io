{"meta":{"title":"石猴博客","subtitle":null,"description":"少年侠气，交结五都雄。肝胆洞。毛发耸。立谈中。","author":"石猴","url":"http://stonemonkey.top"},"pages":[{"title":"","date":"2017-04-13T13:22:26.221Z","updated":"2017-04-13T13:22:26.221Z","comments":true,"path":"404.html","permalink":"http://stonemonkey.top/404.html","excerpt":"","text":"404 *{margin:0;padding:0;outline:none;font-family:\\5FAE\\8F6F\\96C5\\9ED1,宋体;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;} .center{margin:0 auto;} .whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;} .whole img{width:100%;height:100%;} .mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);} .b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px} p{color:#fff;margin-top:40px;font-size:24px;} #num{margin:0 5px;font-weight:bold;} var num=4; function redirect(){ num--; document.getElementById(\"num\").innerHTML=num; if(num"},{"title":"","date":"2017-04-01T14:03:02.000Z","updated":"2017-04-12T13:16:47.270Z","comments":true,"path":"about/index.html","permalink":"http://stonemonkey.top/about/index.html","excerpt":"","text":""},{"title":"归档","date":"2017-04-01T14:04:03.000Z","updated":"2017-04-01T14:10:09.099Z","comments":true,"path":"archives/index.html","permalink":"http://stonemonkey.top/archives/index.html","excerpt":"","text":""},{"title":"bbs","date":"2017-04-11T14:58:05.000Z","updated":"2017-04-11T14:59:03.175Z","comments":true,"path":"bbs/index.html","permalink":"http://stonemonkey.top/bbs/index.html","excerpt":"","text":""},{"title":"","date":"2017-04-01T14:04:25.000Z","updated":"2017-04-02T09:10:45.748Z","comments":false,"path":"categories/index.html","permalink":"http://stonemonkey.top/categories/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-03-11T09:32:21.000Z","updated":"2017-04-02T09:11:29.989Z","comments":true,"path":"tags/index.html","permalink":"http://stonemonkey.top/tags/index.html","excerpt":"","text":"123"},{"title":"works","date":"2017-04-11T13:14:32.000Z","updated":"2017-04-11T13:17:01.916Z","comments":true,"path":"works/index.html","permalink":"http://stonemonkey.top/works/index.html","excerpt":"","text":""}],"posts":[{"title":"判断某个元素是否在屏幕可视区域内","slug":"元素可视","date":"2017-06-30T16:15:28.000Z","updated":"2017-07-09T13:15:11.830Z","comments":true,"path":"2017/07/01/元素可视/","link":"","permalink":"http://stonemonkey.top/2017/07/01/元素可视/","excerpt":"","text":"获取某个元素是否在页面可视区域内 JQuery$(function()&#123; var mainOffsetTop = $(&quot;.body .blog ul li&quot;).first().offset().top; var mainHeight = $(&quot;.body .blog ul li&quot;).first().height(); var winHeight = $(window).height(); $(window).scroll(function()&#123; var winScrollTop = $(window).scrollTop(); if(winScrollTop &gt; mainOffsetTop + mainHeight || winScrollTop &lt; mainOffsetTop - winHeight)&#123; console.log(&quot;不在可视区域内&quot;); &#125;else&#123; console.log(&quot;在可视区域内&quot;); &#125; &#125;)&#125;); &lt;!-- more --&gt; 屏幕的100%高 document.getElementById(&quot;html&quot;).clientHeight; 获取某个元素是否在页面可视区域内 JavaScriptvar yuansu = $(&quot;.body .blog ul li&quot;).first();var mainOffsetTop = yuansu.offsetTop;var mainHeight = yuansu.style.height;var winHeight = window.clietHeight;document.body.onscroll = function()&#123; var winScrollTop = document.body.scrollTop; if(winScrollTop &gt; mainOffsetTop + mainHeight || winScrollTop &lt; mainOffsetTop - winHeight)&#123; console.log(&quot;不在可视区域内&quot;); &#125;else&#123; console.log(&quot;在可视区域内&quot;); &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://stonemonkey.top/categories/JavaScript/"},{"name":"jQuery","slug":"JavaScript/jQuery","permalink":"http://stonemonkey.top/categories/JavaScript/jQuery/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://stonemonkey.top/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"http://stonemonkey.top/tags/jQuery/"}]},{"title":"clientHeight和offsetHeight和scrollHeight的区别","slug":"clientHeight和offsetHeight和scrollHeight","date":"2017-05-22T12:39:19.000Z","updated":"2017-05-22T12:41:48.184Z","comments":true,"path":"2017/05/22/clientHeight和offsetHeight和scrollHeight/","link":"","permalink":"http://stonemonkey.top/2017/05/22/clientHeight和offsetHeight和scrollHeight/","excerpt":"","text":"clientHeight 大部分浏览器对 clientHeight 都没有什么异议，认为是元素可视区域的高度，也就是说元素或窗口中可以看到内容的这个区域的高度，即然是指可看到内容的区域，滚动条不算在内。但要注意padding是算在内。其计算方式为 clientHeight = topPadding + bottomPadding+ height - 水平滚动条高度 &lt;!-- more --&gt; offsetHeight 在IE6，IE7，IE8， IE9以及最新的的FF, Chrome中，对于一般元素，都是 offsetHeight = padding + height + border = clientHeight + 滚动条 + 边框 scrollHeight scrollHeight的争议比较大，有些浏览器认为scrollHeight可以小于clientHeight，有些认为scrollHeight至少应该等于clientHeight。但有一点是一样的，就是 scrollHeight &gt;= topPadding + bottomPadding + 内容margin box的高度 在浏览器中的区别在于： ==IE6、IE7 认为scrollHeight 是内容高度，可以小于clientHeight==。 ==FF 认为scrollHeight 是内容高度，不过最小值是clientHeight。== 注： 以上都是对于一般元素而言的，body和documentElement的clientHeight, offsetHeight和scrollHeight在各个浏览器中的计算方式又不同。 ==在所有的浏览器中，如果你想获取视窗可见部分的高度，应该使用documentElement.clientHeight，因为body.clientHeight是由它的内容决定的。== ==FF30== 注意：Firefox30中，水平滚动条的宽度是17个像素。 body offsetHeight = body.padding + body.border + body.height(CSS设置或内容撑的);clientHeight = body.padding + body.height(CSS设置或内容撑的);scrollHeight &gt;= clientHeight; documentElement offsetHeight = body.offsetHeight + body.margin;clientHeight = window窗口可见高度;scrollHeight &gt;= clientHeight 因此，只是获取窗口可见高度，在FF中得用documentElement.clientHeight，获取整个页面的高度，则应该用documentElement.scrollHeight。 元素 offsetHeight = padding +border + height；clientHeight = padding +height -水平滚动条的高度。scrollHeight &gt;=clientHeight ==总结：从body, documentElement,元素的结果分析，FireFox认为scrollHeight的最小高度是clientHeight。== ==offsetLeft = 元素border左上角到window视窗原点的距离 或 到offsetParent的border box顶部的距离。== ==Chrome 39== 注意：Chrome39中，水平滚动条的宽度是17个像素。 body offsetHeight = body.padding+ body.border + body.height（CSS设置或内容撑大）；clientHeight= body.pdding + body.height（CSS设置或内容撑大）；scrollHeight &gt;= offsetHeight; 并且scrollHeight &gt;= window窗口可见高度； 如果body没有内容(空的)： body.offsetHeight == documentElement.offsetHeight;body.clientHeight ==documentElement.clientHeight;body.scrollHeight ==documentElement.scrollHeight; 而且以上属性的值都是浏览器的视窗高度。 documentElement offsetHeight = scrollHeight = body.offsetHeight+ body.margin;clientHeight = window视窗可见高度; ==如果body内容过短，则documentElement的offsetHeight和scrollHeight将比clientHeight小。== ==因此，只是获取页面窗口可视部分高度，在Chrome中用documentElement.clientHeight；获取整个页面内容最大高度（如果比窗口小，取窗口的高度），则应该用body.scrollHeight；获取页面内容的实际高度，应该使用body.offsetHeight()。========== 元素 offsetHeight = padding + border + height；clientHeight = padding + height -水平滚动条的高度；scrollHeight &gt;= clientHeight；offsetLeft = 元素border左上角到画布原点的距离 或 到offsetParent的border box顶部的距离。 ==IE9== ==注意：IE9中，滚动条的宽度是17个像素。== body offsetHeight = body.padding +body.border + body.height(CSS设置或内容撑大);clientHeight = body.padding + body.height(CSS设置或内容撑大);scrollHeight &gt;= clientHeight; documentElement offsetHeight = clientHeight + 水平滚动条的高度;clientHeight = window窗口可见高度scrollHeight &gt;= clientHeight并且scrollHeight &gt;= body.offsetHeight ==因此，只是获取window窗口可见高度，在IE9中得用documentElement.clientHeight，获取整个页面内容的高度，则应该用documentElement.scrollHeight。== 元素 offsetHeight = padding +border + height。clientHeight = padding +height - 滚动条的宽度。scrollHeight &gt;=clientHeight; ==总结：从body, documentElement,元素的结果分析，IE9认为scrollHeight的最小高度是clientHeight。== ==从结果分析，IE9认为scrollHeight的最小高度是clientHeight。== ==IE8== ==注意：IE8中，滚动条的宽度是17个像素。== body offsetHeight = body.padding +body.border + body.height(CSS设置或内容撑大);clientHeight = body.padding + body.height(CSS设置或内容撑大);scrollHeight &gt;= clientHeight; documentElement offsetHeight = clientHeight + 水平滚动条的高度 + body.borderclientHeight = window窗口可见高度scrollHeight &gt;= clientHeight并且scrollHeight &gt;= body.offsetHeight ==因此，只是获取窗口可见高度，在IE8中得用documentElement.clientHeight，获取整个页面内容高度，则应该用documentElement.scrollHeight。== 元素上 offsetHeight = padding +border + height。clientHeight = padding +height – 水平滚动条高度。scrollHeight &gt;=clientHeight ==从结果分析，IE8认为scrollHeight的最小高度是clientHeight。== ==offsetLeft = 元素border左上角到画布原点的距离 或 到offsetParent的border box顶部的距离。== ==IE7== ==注意：IE7中，滚动条的宽度是17个像素。== body offsetHeight = body.padding + body.border+ body.height(CSS设置或内容撑大)；clientHeight = body.height +body.padding – 水平滚动条高度；scrollHeight = 内容margin box的高度； documentElement offsetHeight = clientHeight =window视窗可见高度;scrollHeight = body.offsetHeight+ body.margin; ==因此，只是获取窗口可见部分高度，在IE7中得用documentElement.clientHeight，获取整个页面内容的大小，则用documentElement.scrollHeight。== 元素 offsetHeight = padding +border + height。clientHeight = padding +height - scrollbar.width。scrollHeight = padding + 内容margin box的高度 ==从结果分析，IE7认为scrollHeight 可以小于clientHeight。== ==offsetLeft = 元素border box左上角到父容器（不是offsetParent）的border box左上角的距离。== ==IE6== body offsetHeight = body.padding +内容margin box的高度。clientHeight = scrollHeight documentElement offsetHeight=画布高度，但offsetHeight&gt;= clientHeightclientHeight = window窗口可见高度。scrollHeight = 内容的高度 ==因此，只是获取页面窗口的大小，在IE6中得用documentElement.clientHeight，获取整个页面内容的大小，则应该用documentElement.offsetHeight。== 元素 offsetHeight = padding +border + height。clientHeight = padding +height - scrollbar.width。scrollHeight = padding + 内容margin box的高度 ==从结果分析，IE6认为scrollHeight 可以小于clientHeight。== ==offsetLeft = 元素border box左上角到父容器（不是offsetParent）的border box左上角的距离。== 结论 ==IE6、IE7认为scrollHeight可以小于clientHeight== ==IE8、IE9和Firefox认为scrollHeight&gt;=clientHeight== ==取窗口可见部分高度，统一用documentElement.clientHeight即可== ==取页面内容的高度（如果内容高度比窗口高度小，取窗口高度)，则用documentElement.scrollHeight，只有Chrome需要使用body.scrollHeight== 同理clientWidth、offsetWidth和scrollWidth的解释与上面相同，只是把高度换成宽度即可。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/tags/Javascript/"}]},{"title":"手机强制横屏","slug":"手机横屏","date":"2017-04-27T11:51:14.000Z","updated":"2017-05-15T13:37:27.169Z","comments":true,"path":"2017/04/27/手机横屏/","link":"","permalink":"http://stonemonkey.top/2017/04/27/手机横屏/","excerpt":"","text":"页面打开，直接横屏显示。 &lt;!-- more --&gt; &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;手机强制横屏&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;main&quot;&gt; 这是一个横屏测试&lt;/div&gt;&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(window).on(&apos;load resize&apos;,function()&#123; var w = window.innerWidth, h = window.innerHeight; var $container = $(&apos;.main&apos;); if (w&lt;h) &#123; $container.css(&#123; &apos;width&apos;: h, &apos;height&apos;: w, &apos;transform&apos;: &apos;rotate(90deg)&apos;, &apos;-webkit-transform&apos;: &apos;rotate(90deg)&apos;, &apos;transform-origin&apos;: w/h/2*100+&apos;% 50%&apos;, &apos;-webkit-transform-origin&apos;: w/h/2*100+&apos;% 50%&apos; &#125;); &#125; else &#123; $container.removeAttr(&apos;style&apos;); &#125;&#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/categories/Javascript/"},{"name":"Jquery","slug":"Javascript/Jquery","permalink":"http://stonemonkey.top/categories/Javascript/Jquery/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/tags/Javascript/"},{"name":"Jquery","slug":"Jquery","permalink":"http://stonemonkey.top/tags/Jquery/"}]},{"title":"每周烧脑-2","slug":"每周烧脑-2","date":"2017-04-15T11:47:50.000Z","updated":"2017-04-15T13:56:42.048Z","comments":true,"path":"2017/04/15/每周烧脑-2/","link":"","permalink":"http://stonemonkey.top/2017/04/15/每周烧脑-2/","excerpt":"","text":"如图所示，有一堵由高度相同但长度不同的砖块砌成的墙，墙的每一层的总长度相同。你需要从上到下画一条垂线，使得这条线切断的砖块最少（注意，不可以在最左或最右边画线），并返回被切断的砖的数量。 输入的数据是一个数组的数组，每一个子数组代表一层，元素是这一层从左到右每块砖的长度。 &lt;!-- more --&gt; 如上图的输入是： [[1,2,2,1], [3,1,2], [1,3,2], [2,4], [3,1,2], [1,3,1,1]] 输出是2 var splitWall = function(wall) &#123; var sum = [],sameArr = [],count = 0,same = 0; //sum由每个数组累加的和的值组成，sameArr由累加和相同的数组的个数组成，count为累加和，same为累加和相同的数组的个数; for(var i =0;i&lt;wall.length;i++)&#123; for(var j=0;j&lt;wall[i].length-1;j++)&#123; count = count+wall[i][j]; sum.push(count); &#125; count = 0; &#125; for(var i=1;i&lt;sum.length-1;i++)&#123; var sumNew = sum.sort(); if(sumNew[i] == sumNew[i+1] &amp;&amp; sumNew[i] == sumNew[i-1])&#123; same++; &#125;else if(sumNew[i] != sumNew[i+1] &amp;&amp; sumNew[i] != sumNew[i-1])&#123; same = 0; &#125;else&#123; same = 2; &#125; sameArr.push(same); &#125; same = Math.max.apply(null, sameArr); var diff = wall.length - same; return diff;&#125;;var arr = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1],[6],[6],[6],[6],[6],[3,3],[3,3],[6],[3,3]]; alert(splitWall(arr));","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/tags/Javascript/"}]},{"title":"git命令集合","slug":"git命令集合","date":"2017-04-07T14:09:51.000Z","updated":"2017-05-15T13:35:39.722Z","comments":true,"path":"2017/04/07/git命令集合/","link":"","permalink":"http://stonemonkey.top/2017/04/07/git命令集合/","excerpt":"","text":"初始化本地git仓库（创建新仓库） git init 配置用户名 git config --global user.name &quot;xxx&quot; 配置邮件 git config --global user.email &quot;xxx@xxx.com&quot; &lt;!-- more --&gt; clone远程仓库 git clone git+ssh://git@192.168.53.168/VT.git 查看当前版本状态（是否修改） git status 添加xyz文件至index git add xyz 增加当前子目录下所有更改过的文件至index git add . 提交 git commit -m 'xxx' 合并上一次提交（用于反复修改） git commit --amend -m 'xxx' 将add和commit合为一步 git commit -am 'xxx' 删除index中的文件 git rm xxx 递归删除 git rm -r * 显示提交日志 git log 显示1行日志 -n为n行 git log -1 显示提交日志及相关变动文件 git log --stat git log -p -m 显示某个提交的详细内容 git show dfb02e6e4f2f7b573337763e5c0013802e392818 可只用commitid的前几位 git show dfb02 显示HEAD提交日志 git show HEAD 显示HEAD的父（上一个版本）的提交日志 ^为上两个版本5为上5个版本 git show HEAD^ 显示已存在的tag git tag 增加v2.0的tag git tag -a v2.0 -m 'xxx' 显示v2.0的日志及详细内容 git show v2.0 显示v2.0的日志 git log v2.0 显示所有未添加至index的变更 git diff 显示所有已添加index但还未commit的变更 git diff --cached 比较与上一个版本的差异 git diff HEAD^ 比较与HEAD版本lib目录的差异 git diff HEAD -- ./lib 比较远程分支master上有本地分支master上没有的 git diff origin/master..master 只显示差异的文件，不显示具体内容 git diff origin/master..master --stat 增加远程定义（用于push/pull/fetch） git remote add origin git+ssh://git@192.168.53.168/VT.git 显示本地分支 git branch 显示包含提交50089的分支 git branch --contains 50089 显示所有分支 git branch -a 显示所有原创分支 git branch -r 显示所有已合并到当前分支的分支 git branch --merged 显示所有未合并到当前分支的分支 git branch --no-merged 本地分支改名 git branch -m master master_copy 从当前分支创建新分支master_copy并检出 git checkout -b master_copy 上面的完整版 git checkout -b master master_copy 检出已存在的features/performance分支 git checkout features/performance 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout --track hotfixes/BJVEP933 检出版本v2.0 git checkout v2.0 从远程分支develop创建新本地分支devel并检出 git checkout -b devel origin/develop 检出head版本的README文件（可用于修改错误回退） git checkout -- README 合并远程master分支至当前分支 git merge origin/master 合并提交ff44785404a8e的修改 git cherry-pick ff44785404a8e 将当前分支push到远程master分支 git push origin master 删除远程仓库的hotfixes/BJVEP933分支 git push origin :hotfixes/BJVEP933 把所有tag推送到远程仓库 git push --tags 获取所有远程分支（不更新本地分支，另需merge） git fetch 获取所有原创分支并清除服务器上已删掉的分支 git fetch --prune 获取远程分支master并merge到当前分支 git pull origin master 重命名文件README为README2 git mv README README2 将当前版本重置为HEAD（通常用于merge失败回退） git reset --hard HEAD git rebase 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） git branch -d hotfixes/BJVEP933 强制删除分支hotfixes/BJVEP933 git branch -D hotfixes/BJVEP933 列出git index包含的文件 git ls-files 图示当前分支历史 git show-branch 图示所有分支历史 git show-branch --all 显示提交历史对应的文件修改 git whatchanged 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git revert dfb02e6e4f2f7b573337763e5c0013802e392818 内部命令：显示某个git对象 git ls-tree HEAD 内部命令：显示某个ref对于的SHA1 HASH git rev-parse v2.0 显示所有提交，包括孤立节点 git reflog git show HEAD@{5} 显示master分支昨天的状态 git show master@{yesterday} 图示提交日志 git log --pretty=format:'%h %s' --graph git show HEAD~3 git show -s --pretty=raw 2be7fcb476 暂存当前修改，将所有至为HEAD状态 git stash 查看所有暂存 git stash list 参考第一次暂存 git stash show -p stash@{0} 应用第一次暂存 git stash apply stash@{0} 文件中搜索文本“delete from” git grep &quot;delete from&quot; git grep -e 'define' --and -e SORT_DIRENT git gc git fsck","categories":[{"name":"git","slug":"git","permalink":"http://stonemonkey.top/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://stonemonkey.top/tags/git/"}]},{"title":"每周烧脑-1","slug":"每周烧脑-1","date":"2017-04-02T16:29:49.000Z","updated":"2017-04-12T14:50:19.780Z","comments":true,"path":"2017/04/03/每周烧脑-1/","link":"","permalink":"http://stonemonkey.top/2017/04/03/每周烧脑-1/","excerpt":"","text":"完美数 完美数定义如下： 正整数 是自己的因数（除自身以外）之和 如28是完美数，因为 1 + 2 + 4 + 7 + 14 = 28 给定一个数字，判断是否是完美数： &lt;!-- more --&gt; &lt;script type=\"text/javascript\"&gt; function IsPerfectNumber(number)&#123; var sum = 0; var num=Math.floor(Math.sqrt(number)); for (var i = num; i &gt; 1; i--) &#123; if(number%i == 0)&#123; sum = sum + i +number/i; &#125; &#125; if((sum+1) &gt; 0)&#123; alert(\"此数为完美数！因子和为\"+(sum+1)); &#125;else&#123; alert(\"此数非完美数！\"); &#125; &#125;&lt;/script&gt; 此题在于减少运算量，先对其进行开方处理。 有更简便的，可回复贴码。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://stonemonkey.top/tags/Javascript/"}]},{"title":"百度网盘自定义提取码","slug":"百度网盘自定义提取码","date":"2017-03-15T15:25:00.000Z","updated":"2017-04-12T14:50:26.616Z","comments":true,"path":"2017/03/15/百度网盘自定义提取码/","link":"","permalink":"http://stonemonkey.top/2017/03/15/百度网盘自定义提取码/","excerpt":"","text":"请按照以下步骤进行操作： 在浏览器中打开百度云盘，选中需要分享的文件，然后点击分享按钮； 点击分享按钮后会弹出一个模态框，先不管它，按 F12 打开开发者工具，切换至控制台（Console），将以下代码复制粘贴到控制台，然后回车； javascript: require([\"function-widget-1:share/util/service/createLinkShare.js\"]) .prototype.makePrivatePassword = function() &#123; return prompt(\"自定义百度网盘提取码\", \"host\")&#125; &lt;!-- more --&gt; 然后点击创建私密链接，会弹出输入框，这时输入你想自定义的密码即可！ 在此黑科技使用过程中需要注意以下事项： 请按照教程一步一步的进行，否则可能会出现错误或失败！ 自定义的密码字符和必须为4（一个字母或数字的字符数是1，一个汉字的字符数是3，因此如果密码中有一个汉字则只能加一个字母或数字），如：1232、S猴等。 附GIF图片一张，动画演示让你更加明了： 本文转自老d博客。","categories":[{"name":"Technology","slug":"Technology","permalink":"http://stonemonkey.top/categories/Technology/"},{"name":"Github","slug":"Technology/Github","permalink":"http://stonemonkey.top/categories/Technology/Github/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://stonemonkey.top/tags/黑科技/"}]},{"title":"你所不知道的Host","slug":"你所不知道的Host","date":"2017-03-11T13:37:38.000Z","updated":"2017-04-12T14:50:12.897Z","comments":true,"path":"2017/03/11/你所不知道的Host/","link":"","permalink":"http://stonemonkey.top/2017/03/11/你所不知道的Host/","excerpt":"","text":"Hosts是什么？ 其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。 &lt;!-- more --&gt; 1. 修改hosts的作用是什么？ 可以加快域名解析 可以进行谷歌、脸书、推特等国外网站的浏览 屏蔽广告、网站等等 2. hosts的位置 windows xp/2003/vista/2008/7/8/10用户HOSTS文件是在&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot; Mac与Android、iOS用户HOSTS文件是在&quot;\\etc\\hosts&quot; 3. 如何修改 直接编辑本机Hosts文件 牛人写好的直接替换 github 百度云 提取密码：host 注：这些网站都需要https的协议打开，国内某些软件会强制http，卸载即可。","categories":[{"name":"Technology","slug":"Technology","permalink":"http://stonemonkey.top/categories/Technology/"},{"name":"Github","slug":"Technology/Github","permalink":"http://stonemonkey.top/categories/Technology/Github/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://stonemonkey.top/tags/黑科技/"}]},{"title":"六州歌头·少年侠气","slug":"六州歌头·少年侠气","date":"2017-03-11T09:12:49.000Z","updated":"2017-04-05T13:04:51.066Z","comments":true,"path":"2017/03/11/六州歌头·少年侠气/","link":"","permalink":"http://stonemonkey.top/2017/03/11/六州歌头·少年侠气/","excerpt":"","text":"少年侠气，交结五都雄。肝胆洞。毛发耸。立谈中。死生同。一诺千金重。推翘勇。矜豪纵。轻盖拥。联飞鞚。斗城东。轰饮酒垆，春色浮寒瓮。吸海垂虹。闲呼鹰嗾犬，白羽摘雕弓。狡穴俄空。乐匆匆。 似黄粱梦。辞丹凤。明月共。漾孤篷。官冗從。怀倥偬。落尘笼。簿书丛。鹖弁如云众。供粗用。忽奇功。笳鼓动。渔阳弄。思悲翁。不请长缨，系取天骄种。剑吼西风。恨登山临水，手寄七弦桐。目送归鸿。","categories":[{"name":"poem","slug":"poem","permalink":"http://stonemonkey.top/categories/poem/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"http://stonemonkey.top/tags/诗词/"}]},{"title":"满江红·写怀","slug":"满江红·写怀","date":"2017-03-11T05:04:41.000Z","updated":"2017-04-05T13:05:05.660Z","comments":true,"path":"2017/03/11/满江红·写怀/","link":"","permalink":"http://stonemonkey.top/2017/03/11/满江红·写怀/","excerpt":"","text":"怒发冲冠，凭栏处、潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。三十功名尘与土，八千里路云和月。莫等闲，白了少年头，空悲切！ 靖康耻，犹未雪。臣子恨，何时灭！驾长车，踏破贺兰山缺。壮志饥餐胡虏肉，笑谈渴饮匈奴血。待从头、收拾旧山河，朝天阙。","categories":[{"name":"poem","slug":"poem","permalink":"http://stonemonkey.top/categories/poem/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"http://stonemonkey.top/tags/诗词/"}]},{"title":"微信端h5视频","slug":"weixinvideo","date":"2017-02-11T13:37:38.000Z","updated":"2017-07-09T13:13:01.606Z","comments":true,"path":"2017/02/11/weixinvideo/","link":"","permalink":"http://stonemonkey.top/2017/02/11/weixinvideo/","excerpt":"","text":"微信端视频设置 &lt;video class=&quot;video-source&quot; width=&quot;100%&quot; height=&quot;240px&quot; controls /*这个属性规定浏览器为该视频提供播放控件*/ style=&quot;object-fit:fill&quot; /*避免视频上下出现黑边*/ webkit-playsinline=&quot;true&quot; /*这个属性是ios 10中设置可以让视频在页面内播放*/ x-webkit-airplay=&quot;true&quot; /*这个属性还不知道作用*/ playsinline=&quot;true&quot; /*IOS微信浏览器支持小窗内播放*/ x5-video-player-type=&quot;h5&quot; /*启用H5播放器,是wechat安卓版特性*/ x5-video-orientation=&quot;portraint&quot; /*播放器支付的方向，landscape横屏，portraint竖屏，默认值为竖屏*/ x5-video-player-fullscreen=&quot;true&quot; /*全屏设置，设置为 true 是防止横屏*/ preload=&quot;auto&quot; /*这个属性规定页面加载完成后载入视频*/ &lt;/video&gt; &lt;!-- more --&gt; 安卓微信端视频问题 X5内核 自带播放器，默认点击全屏播放 退出全屏之后，仍有一个浮层悬浮在视频div上","categories":[{"name":"video","slug":"video","permalink":"http://stonemonkey.top/categories/video/"},{"name":"weixin","slug":"video/weixin","permalink":"http://stonemonkey.top/categories/video/weixin/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://stonemonkey.top/tags/黑科技/"}]},{"title":"自定义滚动条","slug":"scrollbar","date":"2017-01-11T13:30:38.000Z","updated":"2017-07-09T13:03:25.247Z","comments":true,"path":"2017/01/11/scrollbar/","link":"","permalink":"http://stonemonkey.top/2017/01/11/scrollbar/","excerpt":"","text":"自定义滚动条样式 ::-webkit-scrollbar 滚动条整体部分::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb）::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件 &lt;!-- more --&gt; 基础设置 /*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/::-webkit-scrollbar&#123; width: 16px; height: 16px; background-color: #F5F5F5;&#125;/*定义滚动条轨道 内阴影+圆角*/::-webkit-scrollbar-track&#123; -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); border-radius: 10px; background-color: #F5F5F5;&#125;/*定义滑块 内阴影+圆角*/::-webkit-scrollbar-thumb&#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3); background-color: #555;&#125; 详细设置 :horizontal//horizontal伪类适用于任何水平方向上的滚动条:vertical//vertical伪类适用于任何垂直方向的滚动条:decrement//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮:increment//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮:start//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面:end//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面:double-button//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。:single-button//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。:no-buttonno-button伪类表示轨道结束的位置没有按钮。:corner-present//corner-present伪类表示滚动条的角落是否存在。:window-inactive//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。::-webkit-scrollbar-track-piece:start &#123;/*滚动条上半边或左半边*/&#125;::-webkit-scrollbar-thumb:window-inactive &#123;/*当焦点不在当前区域滑块的状态*/&#125;::-webkit-scrollbar-button:horizontal:decrement:hover &#123;/*当鼠标在水平滚动条下面的按钮上的状态*/&#125;","categories":[{"name":"scrollbar","slug":"scrollbar","permalink":"http://stonemonkey.top/categories/scrollbar/"},{"name":"chrome","slug":"scrollbar/chrome","permalink":"http://stonemonkey.top/categories/scrollbar/chrome/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://stonemonkey.top/tags/黑科技/"}]},{"title":"setTimeout 0","slug":"setTimeout","date":"2017-01-04T12:30:38.000Z","updated":"2017-07-09T13:06:48.115Z","comments":true,"path":"2017/01/04/setTimeout/","link":"","permalink":"http://stonemonkey.top/2017/01/04/setTimeout/","excerpt":"","text":"setTimeout(function(){},0) &lt;!-- more --&gt; 调用 setTimeout 函数会在一个时间段过去后在队列中添加一个消息。这个时间段作为函数的第二个参数被传入。如果队列中没有其它消息，消息会被马上处理。但是，如果有其它消息，setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少的时间 而非确切的时间。 (function () &#123; console.log(&apos;this is the start&apos;); setTimeout(function cb() &#123; console.log(&apos;this is a msg from call back&apos;); &#125;); console.log(&apos;this is just a message&apos;); setTimeout(function cb1() &#123; console.log(&apos;this is a msg from call back1&apos;); &#125;, 0); console.log(&apos;this is the end&apos;);&#125;)();// &quot;this is the start&quot;// &quot;this is just a message&quot;// &quot;this is the end&quot;// &quot;this is a msg from call back&quot;// &quot;this is a msg from call back1&quot;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://stonemonkey.top/categories/JavaScript/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://stonemonkey.top/tags/黑科技/"}]}]}